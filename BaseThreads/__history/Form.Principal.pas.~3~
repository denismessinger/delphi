unit Form.Principal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Samples.Gauges, Vcl.StdCtrls,
  Vcl.ExtCtrls;

type
  TForm1 = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    Splitter1: TSplitter;
    Panel3: TPanel;
    GeraLoops: TButton;
    Gauge1: TGauge;
    Gauge2: TGauge;
    Gauge3: TGauge;
    Gauge4: TGauge;
    Gauge5: TGauge;
    procedure GeraLoopsClick(Sender: TObject);
  private
    { Private declarations }
    procedure ExecutaAlgoPorParametro(proc: TProc);
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.GeraLoopsClick(Sender: TObject);
const
   MAX_VAL = 800;

  function GetProcth(gauge: TGauge; rotina: TProc): TProc;
  begin
    gauge.MinValue := 0;
    gauge.MaxValue := MAX_VAL;

    Result :=
      procedure
      begin
        for var i: Integer := 0 to MAX_VAL do
        begin
          ExecutaAlgoPorParametro(rotina);

          if (i mod 7 = 0) then
          begin
            TThread.Synchronize(nil,
              procedure
              begin
                gauge.Progress := i;
              end);
          end;
        end;
      end;
  end;

begin

  var localProc: TProc :=
    procedure
    begin
      Sleep(1);
    end;

  TThread.CreateAnonymousThread(GetProcth(Gauge1, localProc)).Start;
  TThread.CreateAnonymousThread(GetProcth(Gauge2, localProc)).Start;
  TThread.CreateAnonymousThread(GetProcth(Gauge3, localProc)).Start;
  TThread.CreateAnonymousThread(GetProcth(Gauge4, localProc)).Start;
  TThread.CreateAnonymousThread(GetProcth(Gauge5, localProc)).Start;

end;

procedure TForm1.ExecutaAlgoPorParametro(proc: TProc);
begin
  proc;
end;


end.
